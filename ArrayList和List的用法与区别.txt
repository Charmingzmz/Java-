ArrayList： ArrayList是命名空间System.Collections下的一部分，在使用该类时必须进行引用，同时继承了IList接口，提供了数据存储和检索。ArrayList对象的大小是按照其中存储的数据来动态扩充与收缩的。所以，在声明ArrayList对象时并不需要指定它的长度。所有加入的数据均为object，使用需要装箱与拆箱。
泛型List： List是命名空间System.Collections.Generic下，因为ArrayList存在不安全类型与装箱拆箱的缺点，所以出现了泛型的概念。List类是ArrayList类的泛型等效类，它的大部分用法都与ArrayList相似，因为List类也继承了IList接口。最关键的区别在于，在声明List集合时，我们同时需要为其声明List集合内数据的对象类型。
简单说：都是集合，ArrayList t类型不安全，因为加入的数据为object类型，所以需要装箱与拆箱，效率较低。
List：声明时就决定了类型，所以是类型安全的，省掉了装箱与拆箱的过程，效率比ArrayList要高。
（1）：ArrayList
                                        ArrayList list =new ArrayList();                   
			 while(rs.next()){
				 Student stu=new Student();
				 stu.setStudentNumber(rs.getString("studentNumber"));
				 stu.setStudentName(rs.getString("studentName"));
				 stu.setStudentSex(rs.getString("studentSex"));
				 stu.setStudentAge(rs.getString("studentAge"));
				 stu.setStudentWeight(rs.getDouble("studentWeight"));
				 list.add(stu); //ArrayList所有加入的数据均为object，使用时需要装箱和拆箱
			 }
			 HttpSession session=request.getSession();
			 session.setAttribute("list",list);

 <%ArrayList list=(ArrayList)session.getAttribute("list"); %>  <!-- session可以存储任意类型的数据，取出的时候要转换一下类型 -->
    <center>
       您要查询的学生总共有<font size="5" color="red"><%=list.size() %></font>人
       <table bgcolor="lightyellow" border="2" width="600">
          <tr bgcolor="skyblue" align="center">
             <th>学号</th>
             <th>姓名</th>
             <th>性别</th>
             <th>年龄</th>
             <th>体重(kg)</th>
          </tr>
          <%
             for(int i=0;i<list.size();i++){
                Student st=(Student)list.get(i);
          %>
             <tr align="center">
                <td><%=st.getStudentNumber() %></td>
                <td><%=st.getStudentName() %></td>
                <td><%=st.getStudentSex() %></td>
                <td><%=st.getStudentAge() %></td>
                <td><%=st.getStudentWeight() %></td>
             </tr>
          <%     
             }
           %>
       </table>
    </center>

（2）List<>  集合泛型
    第一种用法
    SqlSession session = MyBatisUtil.getSession();		
    List<Goods> list =session.selectList("com.zmz.dao.IGoodsDao.findAllGoods");//list声明时就决定了类型省掉了装箱和拆箱
    return list;


  第二种用法
    SqlSession session = null;
    List<Goods> list = new ArrayList<Goods>();
    session = MyBatisUtil.getSession();
    list = session.selectList("com.zmz.dao.IGoodsDao.findGoodsByName",name);

    综合用法遍历数据
    public static void findAllGoods(){
		int count=0;
		IGoodsDao goodsDao=new GoodsDaoImpl();
		List<Goods> sList=goodsDao.findAllGoods();	
		for(int i=0;i<sList.size();i++){
			sList.get(i).show();
			count++;
		}
		System.out.print("供应商表总记录数为："+count);
	}
第三种用法  最常用的方法
List<User> list=new ArrayList<User>();
        list.add(new User("zmz",12));
        list.add(new User("djj",21));
        list.add(new User("asd",12));
        list.add(new User("yzx",21));